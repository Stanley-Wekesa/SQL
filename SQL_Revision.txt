--Prepared by Stanley Wekesa --
--Text Editor -PopSQL

--SQL BASICS--
#Creating Tables
--SQL is written in caps to differenciate it from other types of code--
--Anything after (--or #) is a comment
--Semicolon symbolises the end of an SQL command--
--Run every command independently to view results--

#CREATE TABLE table_name
CREATE TABLE student ( #enter Column name and and its Data type
    student_id INT, #int for integer
    name VARCHAR(20), #varchar for character + specified size
    major VARCHAR(20),
    PRIMARY KEY(student_id) #Specify the primary key(unique identifier of a record)
);

DROP TABLE student; #Deletes a Table

DESCRIBE student; #Gives details of a table structure

#Adjusting table setup
ALTER TABLE student ADD gpa DECIMAL(3,2); #Adding a column(gpa) to a table 

ALTER TABLE student DROP COLUMN gpa; #Deleting a column from a table

SELECT * FROM student;  #Get the tables data (*) - means all data

#Inserting Values to fields
#INSERT INTO table_name VALUES (column1,column2,column3)
INSERT INTO student VALUES(1, 'Jack', 'Biology');
INSERT INTO student VALUES(2, 'Kate', 'Socialogy');
INSERT INTO student(student_id, name) VALUES(3, 'Claire'); #specify columns incase you intend not to enter a value - (student_id, name)
INSERT INTO student VALUES(4, 'Jack', 'Biology');
INSERT INTO student VALUES(5, 'Mike', 'Computer Science');

#Adding parameters to a table 
CREATE TABLE student (
    student_id INT,
    name VARCHAR(20) NOT NULL, #Field must be have a value
    major VARCHAR(20) UNIQUE, #Field should not have identical values
    PRIMARY KEY(student_id) #Primary key is NOT NULL and UNIQUE by default
);

INSERT INTO student VALUES(3, NULL, 'Chemistry'); #will not execute because name is set to NOT NULL
INSERT INTO student VALUES(4, 'Jack', 'Biology'); #will note execute because this column is set to UNIQUE

CREATE TABLE student (
    student_id INT AUTO_INCREMENT, #Field will be field automaticaly from 1,2....
    name VARCHAR(20),
    major VARCHAR(20) DEFAULT('Undecided'), #the character 'Undecided' will be used incase a field in this column is not filled
    PRIMARY KEY(student_id)
);

INSERT INTO student(student_id, name) VALUES(1, 'Jack'); #jacks major will be undecided since it is the default

INSERT INTO student(name, major) VALUES('Jack', 'Biology');
INSERT INTO student(name, major) VALUES('Kate', 'Socialogy'); #sql will automaticly list Jack and Kates IDs @AUTO_INCREAMENT

#Updating and Deleting Data
#Update
SELECT * FROM student;

UPDATE student
SET major = 'Chemistry'
WHERE major = 'undecided'; #changing a group of data in a column

UPDATE student
SET major = 'Bio'; #changing the whole column (major) to (Bio)

UPDATE student
SET major = 'Sociology'
WHERE student_id = 2; #changing a specific row (student with is 2)

UPDATE student
SET major = 'Comp Sci'
WHERE student_id = 4 OR student_id = 5; #changing two different Id majors to one 

UPDATE student
SET name = 'Tom' , major = 'Undecided'
WHERE student_id = 1; #changing two fields in a column with reference to ID

#Delete
SELECT * FROM student;

DELETE FROM student
WHERE name = 'Mike' AND major = 'Undecided'; #To delete values with specific parameteres from a database

#Getting information from the database
SELECT * FROM student; #get all data from students

#Querying a specified number of columns
SELECT student.student_id, major #you can use table_name.column_name or Column_name only
FROM student; 

SELECT student_id, student.name
FROM student
ORDER BY name DESC; #(Order by) is ascending(ASC) by default, the (DESC keyword) makes the order descending

SELECT *
FROM student
ORDER BY major, student_id; #Order by different sub-columns. First by major then student_id

SELECT *
FROM student
ORDER BY student_id DESC
LIMIT 2; #gives only two results

#Filtering (specifying actions)
SELECT *
FROM student
WHERE major ='Chemistry' OR name = 'Kate'; #Get data of all Kates doing Chemistry

-- Other Relational Operators are <, >, <=, >=, =, <>, AND, OR
SELECT *
FROM student
WHERE major <> 'Chemistry'; #<> translates to 'not equals to' Get subjects other than Chemistry

SELECT *
FROM student
WHERE name IN ('Claire','Kate','Mike'); #Get students data with the (following values)

--You can combine all this information to create complex queries

--COMPANY DATABASE INTRO--
--Foreign key is a column representing a primary key of a table in a different table--

--creating a complex schema--

DROP TABLE student;

DESCRIBE TABLE student;

#Creating tables
CREATE TABLE employee ( #Create employee table
    emp_id INT PRIMARY KEY, #You can make a column a primary key in this way too(unique identifier of an entry/row)
    first_name VARCHAR(40),
    last_name VARCHAR(40),
    birth_day DATE,
    sex VARCHAR(1),
    salary INT,
    super_id INT, #We intend to make this column a foreign key after creating their tables (Supervisor_id)
    branch_id INT #we intend to make this column a foreign key after creating their tables
);

DESCRIBE TABLE employee; #View the table structure (NOT A MUST)
SELECT * FROM employee;

CREATE TABLE branch (
    branch_id INT PRIMARY KEY,
    branch_name VARCHAR(40),
    mgr_id INT, #Manager_id
    mgr_start_date DATE, #Manager_Start_Date
    FOREIGN KEY(mgr_id) REFERENCES employee(emp_id) ON DELETE SET NULL #Setting a column to a foreign key in relation to the employee 
);

SELECT * FROM branch;

ALTER TABLE employee #Now that the branch table has been created
ADD FOREIGN KEY(branch_id) #We make branch_id a foreign key
REFERENCES branch(branch_id) #With reference to its table
ON DELETE SET NULL; #Find out about this statement

ALTER TABLE employee
ADD FOREIGN KEY(super_id)
REFERENCES employee(emp_id)
ON DELETE SET NULL;

DESCRIBE TABLE employee;

CREATE TABLE client (
    client_id INT PRIMARY KEY,
    client_name VARCHAR(40),
    branch_id INT,
    FOREIGN KEY(branch_id) REFERENCES branch(branch_id) ON DELETE SET NULL #Making this field a foreign key since its relating table is already created
);

SELECT * FROM client;

CREATE TABLE works_with (
    emp_id INT,
    client_id INT,
    total_sales INT,
    PRIMARY KEY(emp_id, client_id),
    FOREIGN KEY(emp_id) REFERENCES employee(emp_id) ON DELETE CASCADE, #Find out on 'ON DELETE CASCADE'
    FOREIGN KEY(client_id) REFERENCES client(client_id) ON DELETE CASCADE
);

CREATE TABLE branch_supplier (
    branch_id INT,
    supplier_name VARCHAR(40),
    supply_type VARCHAR(40),
    PRIMARY KEY (branch_id, supplier_name),
    FOREIGN KEY (branch_id) REFERENCES branch(branch_id) ON DELETE CASCADE 
);

SELECT * FROM works_with;
SELECT * FROM branch_supplier;

--Entering data into tables--
#Due to the tables relationships, infromation is enterred into the database is a specific way

-- Corporate
INSERT INTO employee VALUES(100, 'David', 'Wallace', '1967-11-17', 'M', 250000, NULL, NULL);
#The branch_id field is NULL because the branch table is not populated

INSERT INTO branch VALUES(1, 'Corporate', 100, '2006-02-09');

UPDATE employee
SET branch_id = 1
WHERE emp_id = 100; #Updating David Wallace

INSERT INTO employee VALUES(101, 'Jan', 'Levinson', '1961-05-11', 'F', 110000, 100, 1); #inserting the last employee

-- Scranton
INSERT INTO employee VALUES(102, 'Michael', 'Scott', '1964-03-15', 'M', 75000, 100, NULL);

INSERT INTO branch VALUES(2, 'Scranton', 102, '1992-04-06');

UPDATE employee
SET branch_id = 2
WHERE emp_id = 102;

INSERT INTO employee VALUES(103, 'Angela', 'Martin', '1971-06-25', 'F', 63000, 102, 2);
INSERT INTO employee VALUES(104, 'Kelly', 'Kapoor', '1980-02-05', 'F', 55000, 102, 2);
INSERT INTO employee VALUES(105, 'Stanley', 'Hudson', '1958-02-19', 'M', 69000, 102, 2);

-- Stamford
INSERT INTO employee VALUES(106, 'Josh', 'Porter', '1969-09-05', 'M', 78000, 100, NULL);

INSERT INTO branch VALUES(3, 'Stamford', 106, '1998-02-13');

UPDATE employee
SET branch_id = 3
WHERE emp_id = 106;

INSERT INTO employee VALUES(107, 'Andy', 'Bernard', '1973-07-22', 'M', 65000, 106, 3);
INSERT INTO employee VALUES(108, 'Jim', 'Halpert', '1978-10-01', 'M', 71000, 106, 3);

-- BRANCH SUPPLIER
INSERT INTO branch_supplier VALUES(2, 'Hammer Mill', 'Paper');
INSERT INTO branch_supplier VALUES(2, 'Uni-ball', 'Writing Utensils');
INSERT INTO branch_supplier VALUES(3, 'Patriot Paper', 'Paper');
INSERT INTO branch_supplier VALUES(2, 'J.T. Forms & Labels', 'Custom Forms');
INSERT INTO branch_supplier VALUES(3, 'Uni-ball', 'Writing Utensils');
INSERT INTO branch_supplier VALUES(3, 'Hammer Mill', 'Paper');
INSERT INTO branch_supplier VALUES(3, 'Stamford Lables', 'Custom Forms');

-- CLIENT
INSERT INTO client VALUES(400, 'Dunmore Highschool', 2);
INSERT INTO client VALUES(401, 'Lackawana Country', 2);
INSERT INTO client VALUES(402, 'FedEx', 3);
INSERT INTO client VALUES(403, 'John Daly Law, LLC', 3);
INSERT INTO client VALUES(404, 'Scranton Whitepages', 2);
INSERT INTO client VALUES(405, 'Times Newspaper', 3);
INSERT INTO client VALUES(406, 'FedEx', 2);

-- WORKS_WITH
INSERT INTO works_with VALUES(105, 400, 55000);
INSERT INTO works_with VALUES(102, 401, 267000);
INSERT INTO works_with VALUES(108, 402, 22500);
INSERT INTO works_with VALUES(107, 403, 5000);
INSERT INTO works_with VALUES(108, 403, 12000);
INSERT INTO works_with VALUES(105, 404, 33000);
INSERT INTO works_with VALUES(107, 405, 26000);
INSERT INTO works_with VALUES(102, 406, 15000);
INSERT INTO works_with VALUES(105, 406, 130000);

#Checking the tables to ensure data was entered correctly
-- Find all employees
SELECT *
FROM employee;

-- Find all clients
SELECT *
FROM client;

#More Queries
-- Find all employees ordered by salary
SELECT *
from employee
ORDER BY salary DESC; #Getting all employees ordered from large to small

-- Find all employees ordered by sex then name
SELECT *
from employee
ORDER BY sex, first_name; #Order by sex then first_name in descending order

-- Find the first 5 employees in the table
SELECT *
from employee
LIMIT 5;

-- Find the first and last names of all employees
SELECT first_name, employee.last_name
FROM employee;

-- Find the forename and surnames names of all employees
#the AS key word is used to mean, in this case, Getting the first name and displaying it as fore name
SELECT first_name AS forename, employee.last_name AS surname
FROM employee;

-- Find out all the different genders
#Distinct is used to find out what are the different values that are stored in a column
SELECT DISTINCT sex
FROM employee;

-- Find all male employees
SELECT *
FROM employee
WHERE sex = 'M';

-- Find all employees at branch 2
SELECT *
FROM employee
WHERE branch_id = 2;

-- Find all employee's id's and names who were born after 1969
SELECT emp_id, first_name, last_name
FROM employee
WHERE birth_day >= 1970-01-01;

-- Find all female employees at branch 2
SELECT *
FROM employee
WHERE branch_id = 2 AND sex = 'F';

-- Find all employees who are female & born after 1969 or who make over 80000
SELECT *
FROM employee
WHERE (birth_day >= '1970-01-01' AND sex = 'F') OR salary > 80000;

-- Find all employees born between 1970 and 1975
#'BETWEEN AND' is used to find data between a specified range of numbers
SELECT *
FROM employee
WHERE birth_day BETWEEN '1970-01-01' AND '1975-01-01';

-- Find all employees named Jim, Michael, Johnny or David
SELECT *
FROM employee
WHERE first_name IN ('Jim', 'Michael', 'Johnny', 'David');

--SQL FUNCTIONS--
-- Find the number of employees
SELECT COUNT(super_id) #COUNT is a function to find the number of data in a table
FROM employee; #from employee table, how many super_id entried do we have?

-- Find the number of female employees born after 1970-01-01
SELECT COUNT(emp_id)
FROM employee
WHERE sex = 'F' AND birth_day > '1971-01-01';


-- Find the average of all employee's salaries
SELECT AVG(salary)
FROM employee;

-- Find the sum of all employee's salaries
SELECT SUM(salary)
FROM employee;

-- Agregation --
-- Find out how many males and females there are
SELECT COUNT(sex), sex
FROM employee
GROUP BY sex; #Gives us count of sex and then groups them as males and females

-- Find the total sales of each salesman
SELECT SUM(total_sales), client_id
FROM works_with
GROUP BY client_id;

-- Find the total amount of money spent by each client
SELECT SUM(total_sales), client_id
FROM works_with
GROUP BY client_id;

-- WILDCARDS AND THE LIKE KEYWORD --
#Grabbing data that follows a certain partern
-- % = any number of characters, _ = one character

-- Find any client's who are an LLC (have an LLC in there name)
SELECT *
FROM client #Like is a special keyword used with wildcards
WHERE client_name LIKE '%LLC'; # we are getting client_name with any number of characters then llc

-- Find any branch suppliers who are in the label business
SELECT *
FROM branch_supplier # we are finding branch suppliers with the word label in their name
WHERE supplier_name LIKE '% Label%'; # in supplier_name column find (any number of characters labed any number of characters)

-- Find any employee born on the 10th day of the month
SELECT *
FROM employee
WHERE birth_day LIKE '____-10%'; # four underscores represent year in a date format then a hifen 10 and any other character after that

-- Find any clients who are schools
SELECT *
FROM client
WHERE client_name LIKE '%Highschool%';

-- UNION # Combining multiple select statements into one 
-- Union Rules --
-- 1. Same number of data to be returned in both select statements
-- 2. Both select statements have to have the same data types

-- Find a list of employee and branch names
SELECT employee.first_name AS Employee_Branch_Names # AS defines the name given to the result
FROM employee
UNION # combines two select statements
SELECT branch.branch_name
FROM branch;

-- Find a list of all clients & branch suppliers' names
SELECT client.client_name AS Non-Employee_Entities, client.branch_id AS Branch_ID
FROM client
UNION
SELECT branch_supplier.supplier_name, branch_supplier.branch_id
FROM branch_supplier;
# we are mentioning the origin table of the branch_id field in both select statements for readability

-- JOINS --
-- Combines information from different tables into one using a common field

-- Add the extra branch
INSERT INTO branch VALUES(4, "Buffalo", NULL, NULL);

-- Find all branches and names of their managers
# General Join/ Interjoin
SELECT employee.emp_id, employee.first_name, branch.branch_name # Combines two tables Employee and Branch table
FROM employee
JOIN branch   
ON employee.emp_id = branch.mgr_id;

--Left Join # we include all records from the left table (employee)
SELECT employee.emp_id, employee.first_name, branch.branch_name 
FROM employee
LEFT JOIN branch    -- LEFT JOIN
ON employee.emp_id = branch.mgr_id;

-- Right Join # shows all records from the left table (branch)
SELECT employee.emp_id, employee.first_name, branch.branch_name 
FROM employee
RIGHT JOIN branch    -- RIGHT JOIN
ON employee.emp_id = branch.mgr_id;
# Full outer join (grabs all records from left and right table) though it is not used in sql

-- NESTED QUERIES --
# Using results from one select query to another select query 
-- Find names of all employees who have sold over 50,000
SELECT employee.first_name, employee.last_name
FROM employee
WHERE employee.emp_id IN (SELECT works_with.emp_id
                          FROM works_with
                          WHERE works_with.total_sales > 50000);

-- Find all clients who are handles by the branch that Michael Scott manages
-- Assume you know Michael's ID
SELECT client.client_id, client.client_name
FROM client
WHERE client.branch_id = (SELECT branch.branch_id
                          FROM branch
                          WHERE branch.mgr_id = 102);

 -- Find all clients who are handles by the branch that Michael Scott manages
 -- Assume you DONT'T know Michael's ID
 SELECT client.client_id, client.client_name
 FROM client
 WHERE client.branch_id = (SELECT branch.branch_id
                           FROM branch
                           WHERE branch.mgr_id = (SELECT employee.emp_id
                                                  FROM employee
                                                  WHERE employee.first_name = 'Michael' AND employee.last_name ='Scott'
                                                  LIMIT 1));


-- Find the names of employees who work with clients handled by the scranton branch
SELECT employee.first_name, employee.last_name
FROM employee
WHERE employee.emp_id IN (
                         SELECT works_with.emp_id
                         FROM works_with
                         )
AND employee.branch_id = 2;

-- Find the names of all clients who have spent more than 100,000 dollars
SELECT client.client_name
FROM client
WHERE client.client_id IN (
                          SELECT client_id
                          FROM (
                                SELECT SUM(works_with.total_sales) AS totals, client_id
                                FROM works_with
                                GROUP BY client_id) AS total_client_sales
                          WHERE totals > 100000
);

-- ON DELETE SET NULL # in any other table where records share data from this field will display NULL when the record is deleted 
-- We use ON DELETE SET NULL when the relationship between the two fields is a primary key - foreign key relationship only

-- ON DELETE CASCADE # the field set to this keywords is deleted completely from the database and its related records
-- We use ON DELETE CASCADE when the relationship between the two fields is a primary key - primary key relationship

--TRIGGERS - are used to control events
#Trigger format

-- CREATE
--     TRIGGER `event_name` BEFORE/AFTER INSERT/UPDATE/DELETE
--     ON `database`.`table`
--     FOR EACH ROW BEGIN
-- 		-- trigger body
-- 		-- this code is applied to every
-- 		-- inserted/updated/deleted row
--     END;

# Create a table to test whether a trigger worked or not
CREATE TABLE trigger_test (
     message VARCHAR(100)
);


# Trigger operations are executed in the my SQL command line client and not on SQL text editors
# Delimiter is a symbol that symbolises end of execution in SQL

DELIMITER $$ # we first execute this statement in CLI to change delimeter to $$ 
CREATE # Start of the trigger
    TRIGGER my_trigger BEFORE INSERT
    ON employee
    FOR EACH ROW BEGIN
        INSERT INTO trigger_test VALUES('added new employee');
    END$$ # End of trigger
DELIMITER ; # we reset the delimeter back to default

INSERT INTO employee # Run this command on CLI or on your text Editor
VALUES(109, 'Oscar', 'Martinez', '1968-02-19', 'M', 69000, 106, 3);

SELECT * FROM trigger_test; # Checking is trigger was effective

DELIMITER $$
CREATE
    TRIGGER my_trigger1 BEFORE INSERT # Triggers need to have different names
    ON employee
    FOR EACH ROW BEGIN
        INSERT INTO trigger_test VALUES(NEW.first_name); 
    END$$
DELIMITER ;

INSERT INTO employee
VALUES(110, 'Kevin', 'Malone', '1978-02-19', 'M', 69000, 106, 3);

# You can use triggers to with IF statements
DELIMITER $$
CREATE
    TRIGGER my_trigger BEFORE INSERT
    ON employee
    FOR EACH ROW BEGIN
         IF NEW.sex = 'M' THEN
               INSERT INTO trigger_test VALUES('added male employee');
         ELSEIF NEW.sex = 'F' THEN
               INSERT INTO trigger_test VALUES('added female');
         ELSE
               INSERT INTO trigger_test VALUES('added other employee');
         END IF;
    END$$
DELIMITER ;
INSERT INTO employee
VALUES(111, 'Pam', 'Beesly', '1988-02-19', 'F', 69000, 106, 3);


DROP TRIGGER my_trigger;

# Link https://www.youtube.com/watch?v=HXV3zeQKqGY&t=9266s
# READ ON ER DIANGRAMS
-- Er Diagrams are used to aid in creating database schemas --

# READ ON DESIGN AND ER DIAGRAMS

# READ ON ER MAPPING

  # Step 1 - Mapping of Regular Entity Types
  # Step 2 - Mapping of weak entity types
  # Step 3 - Mapping of Binary 1:1 Relationship Types
  # Step 4 - Mapping of Binary 1:N Relationship Types
  # Step 5 - Mapping of Binary M:N Relationship Types

#THE END. ALL THE BEST.